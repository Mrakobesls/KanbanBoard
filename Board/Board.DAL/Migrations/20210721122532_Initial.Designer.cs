// <auto-generated />
using System;
using BoardApp.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BoardApp.DAL.Migrations
{
    [DbContext(typeof(BoardDbContext))]
    [Migration("20210721122532_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BoardApp.DAL.Model.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Project about bowling",
                            Title = "Bowling kata"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Project about board",
                            Title = "Board project"
                        });
                });

            modelBuilder.Entity("BoardApp.DAL.Model.BoardAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("BoardAccesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardId = 1,
                            PermissionId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BoardId = 2,
                            PermissionId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColumnId = 1,
                            Title = "Made MVC"
                        },
                        new
                        {
                            Id = 2,
                            ColumnId = 2,
                            Title = "Create DB"
                        });
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardId = 1,
                            Title = "New"
                        },
                        new
                        {
                            Id = 2,
                            BoardId = 2,
                            Title = "In Progress"
                        });
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            DateTime = new DateTime(2021, 7, 21, 15, 25, 31, 672, DateTimeKind.Local).AddTicks(9236),
                            Text = "I can do it",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2,
                            DateTime = new DateTime(2021, 7, 21, 15, 25, 31, 674, DateTimeKind.Local).AddTicks(1098),
                            Text = "It have to make Dima Karabanovich",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Labels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Important"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dead Line"
                        });
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Update"
                        });
                });

            modelBuilder.Entity("BoardApp.DAL.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.HasAlternateKey("Login");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ArtemVT@gmail.com",
                            FirstName = "Artem",
                            LastName = "Valtert",
                            Login = "ArtemVT",
                            Password = "ArtemVT29018"
                        },
                        new
                        {
                            Id = 2,
                            Email = "DimaKR",
                            FirstName = "Dima",
                            LastName = "Karabanovich",
                            Login = "DimaKR",
                            Password = "DimaKR09267"
                        });
                });

            modelBuilder.Entity("CardLabel", b =>
                {
                    b.Property<int>("CardsId")
                        .HasColumnType("int");

                    b.Property<int>("LabelsId")
                        .HasColumnType("int");

                    b.HasKey("CardsId", "LabelsId");

                    b.HasIndex("LabelsId");

                    b.ToTable("CardLabel");
                });

            modelBuilder.Entity("CardUser", b =>
                {
                    b.Property<int>("CardsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("CardsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CardUser");
                });

            modelBuilder.Entity("BoardApp.DAL.Model.BoardAccess", b =>
                {
                    b.HasOne("BoardApp.DAL.Model.Board", "Board")
                        .WithMany("BoardAccesses")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardApp.DAL.Model.Permission", "Permission")
                        .WithMany("BoardAccesses")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardApp.DAL.Model.User", "User")
                        .WithMany("BoardAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Card", b =>
                {
                    b.HasOne("BoardApp.DAL.Model.Column", "Column")
                        .WithMany("Cards")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Column", b =>
                {
                    b.HasOne("BoardApp.DAL.Model.Board", "Board")
                        .WithMany("Columns")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Comment", b =>
                {
                    b.HasOne("BoardApp.DAL.Model.Card", "Card")
                        .WithMany("Comments")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardApp.DAL.Model.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardLabel", b =>
                {
                    b.HasOne("BoardApp.DAL.Model.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardApp.DAL.Model.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardUser", b =>
                {
                    b.HasOne("BoardApp.DAL.Model.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardApp.DAL.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Board", b =>
                {
                    b.Navigation("BoardAccesses");

                    b.Navigation("Columns");
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Card", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Column", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("BoardApp.DAL.Model.Permission", b =>
                {
                    b.Navigation("BoardAccesses");
                });

            modelBuilder.Entity("BoardApp.DAL.Model.User", b =>
                {
                    b.Navigation("BoardAccesses");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
